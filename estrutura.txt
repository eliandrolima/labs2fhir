
## **1. Definição do Escopo e Ambiente**

**1.1. Definir requisitos funcionais e não funcionais:**

* Quais exames laboratoriais serão priorizados?
* Volume esperado de arquivos/processamento?
* Infraestrutura alvo (local, nuvem, Docker)?

**1.2. Configurar ambiente de desenvolvimento:**

* Python 3.10+
* Virtualenv ou Poetry para gestão de dependências
* Repositório Git (GitHub recomendado)
* Estrutura básica de pastas (src/, tests/, docs/)

---

## **2. Recebimento do Arquivo PDF**

**2.1. Upload do PDF:**

* Pode ser via interface web (Streamlit, FastAPI + frontend simples) ou CLI.
* Validação do tipo de arquivo.

---

## **3. Extração de Texto do PDF**

**3.1. Bibliotecas recomendadas:**

* [PyMuPDF (fitz)](https://pymupdf.readthedocs.io/en/latest/)
* [pdfplumber](https://github.com/jsvine/pdfplumber) (excelente para tabelas)
* Fallback: [PDFMiner.six](https://github.com/pdfminer/pdfminer.six)

**3.2. Implementação:**

* Função para ler e extrair todo o texto do PDF.
* Caso o layout seja predominantemente tabular, extração estruturada (tabelas como listas de dicionários).

---

## **4. Classificação do Documento**

**4.1. Utilizar LLM via LangChain/OpenAI:**

* Prompt robusto para identificar se o PDF contém resultado de exame laboratorial.
* Avaliar resposta:

  * Se **não for** exame, interromper e solicitar novo PDF.
  * Se **for**, seguir para o próximo passo.

**4.2. Armazenar logs dessa decisão para melhoria futura do prompt/modelo.**

---

## **5. Estruturação Inicial dos Dados**

**5.1. Utilizar LLM (via LangChain) para estruturação:**

* Prompt para identificar e retornar em markdown:

  * Data do exame
  * Metodologia
  * Lista de parâmetros (nome, unidade, resultado, valores de referência)

**5.2. Validar campos extraídos:**

* Funções auxiliares para checagem de datas, unidades e valores.

---

## **6. Mapeamento para Recurso FHIR**

**6.1. Análise do markdown:**

* Definir qual recurso FHIR usar (normalmente Observation e/ou DiagnosticReport).
* Validar se há informações mínimas para cada recurso.

**6.2. Mapeamento dos dados extraídos:**

* Nome do parâmetro → code (usar SNOMED-CT se possível)
* Resultado → valueQuantity
* Unidade → unit
* Valores de referência → referenceRange

---

## **7. Geração do JSON FHIR**

**7.1. Utilizar biblioteca FHIR para Python:**

* [FHIR.resources](https://github.com/nazrulworld/fhir.resources) (implementação oficial do FHIR R4 para Python)
* Função para montar o JSON do recurso, conforme padrão HL7 FHIR R4

**7.2. Validar o JSON gerado:**

* Utilizar validadores (ex: [FHIR validator](https://www.hl7.org/fhir/validation.html)) em testes unitários.

---

## **8. Saída**

**8.1. Exibir apenas o JSON puro do recurso FHIR.**
**8.2. Oferecer opção de download ou envio via API (se aplicável).**

---

## **9. Testes e Validação**

**9.1. Criar suíte de testes automatizados:**

* pytest para Python
* Testar extração, classificação, estruturação e geração FHIR

**9.2. Utilizar arquivos de exames reais e sintéticos para testes.**

---

## **10. Documentação**

**10.1. Criar README.md detalhado:**

* Passos de instalação, exemplos de uso, fluxo da aplicação
* Instruções de deploy (Docker, local, nuvem)
* Como contribuir/testar

**10.2. Comentar o código e manter documentação inline (docstrings).**

---

## **11. Integração Contínua e Deploy**

**11.1. Configurar CI/CD:**

* GitHub Actions, GitLab CI ou similar
* Rodar testes, lint e validação automática do FHIR

**11.2. Empacotar para deploy:**

* Dockerfile, docker-compose (se necessário)
* Orientações para execução em produção

---

## **Sugestão de Stack Tecnológica**

* **Extração PDF:** PyMuPDF, pdfplumber
* **NLP/LLM:** LangChain + OpenAI API
* **FHIR:** fhir.resources
* **APIs:** FastAPI (opcional para disponibilizar serviço)
* **Frontend:** Streamlit (opcional para POC)
* **Testes:** pytest
* **CI/CD:** GitHub Actions

---

## **Resumo Visual do Pipeline**

```mermaid
flowchart TD
  A[Upload PDF] --> B[Extração de Texto]
  B --> C{Classificação (LLM)}
  C -- Não é exame --> D[Solicitar novo PDF]
  C -- É exame --> E[Estruturação em Markdown (LLM)]
  E --> F[Mapeamento FHIR]
  F --> G[Geração JSON FHIR]
  G --> H[Saída (JSON puro)]
```

# **Estrutura Inicial do Projeto**

nlp2fhir/
├── src/
│   ├── __init__.py
│   ├── main.py               # Ponto de entrada da aplicação (CLI)
│   ├── pdf_receiver.py       # Recebimento e validação do PDF
│   ├── pdf_extractor.py      # Extração de texto/tabelas do PDF
│   ├── classifier.py         # Classificação do documento (LLM)
│   ├── nlp_structurer.py     # Estruturação dos dados (LLM/NLP)
│   ├── fhir_mapper.py        # Mapeamento para recursos FHIR
│   ├── fhir_generator.py     # Geração do JSON FHIR
│   └── utils.py              # Funções utilitárias
├── tests/
│   ├── __init__.py
│   ├── test_pdf_receiver.py
│   ├── test_pdf_extractor.py
│   └── ... (outros testes)
├── examples/
│   ├── hemograma_exemplo.pdf
│   └── ... (exemplos de entrada/saída)
├── requirements.txt
├── README.md
├── .gitignore
└── LICENSE
